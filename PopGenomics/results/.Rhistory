setwd("~/Downloads/")
library(tidyverse)
dat <- read.table("spruce_ELF.txt", header=T, sep="\t")
dat <- read.table("FitnessTraits_GeneticParameters_RedSpruce.txt", header=T, sep="\t")
dat2 <- dat[which(dat$Region=="E"),]
str(dat2)
MD = c("XCS","XDS","XPK")
WV = c("XCS","XDS","XPK","XSK")
VA = c("BFA","KOS","XDS","XPK")
#######
CV <- function(Pop, Trait) {
tmp = dat2[which(dat2$Population %in% Pop),Trait]
SD = sd(tmp)
Avg = mean(tmp)
CV = SD/Avg
return(c(CV, SD, Avg))
}
Nreps=10000
Nsets=4
set <- data.frame(CV=numeric(length=Nreps),
Avg=numeric(length=Nreps),
Npops=numeric(length=Nreps))
Trait="Fitness"
for(i in 1:Nreps){
pops <- c(sample(unique(dat2$Population), size=Nsets, replace=F))
set$CV[i] = CV(pops,Trait)[1]
set$Avg[i] = CV(pops,Trait)[3] #mean(dat2[which(dat2$Population %in% pops),Trait])
set$Npops[i] = length(pops)
if(is.na(set$CV[i]==T)){
print(pops)
}
}
hist(set$CV)
abline(v=CV(WV,"Fitness")[1], col="blue",lwd=3)
abline(v=CV(VA,"Fitness")[1], col="red",lwd=3)
hist(set$Avg)
abline(v=CV(WV,"Fitness")[3], col="blue",lwd=3)
abline(v=CV(VA,"Fitness")[3], col="red",lwd=3)
set2 <- data.frame(CV=numeric(length=Nreps),
Avg=numeric(length=Nreps),
Npops=numeric(length=Nreps))
Trait="Fitness"
for(i in 1:Nreps){
pops <- c(sample(unique(dat2$Population), size=1, replace=F))
set2$CV[i] = CV(pops,Trait)[1]
set2$Avg[i] = CV(pops,Trait)[3] #mean(dat2[which(dat2$Population %in% pops),Trait])
set2$Npops[i] = length(pops)
if(is.na(set2$CV[i]==T)){
print(pops)
}
}
hist(set2$CV)
abline(v=CV(WV,"Fitness")[1], col="blue",lwd=3)
abline(v=CV(VA,"Fitness")[1], col="red",lwd=3)
abline(v=CV(MD,"Fitness")[1], col="orange",lwd=3)
hist(set2$Avg)
abline(v=CV(WV,"Fitness")[3], col="blue",lwd=3)
abline(v=CV(VA,"Fitness")[3], col="red",lwd=3)
abline(v=CV(MD,"Fitness")[3], col="orange",lwd=3)
?rowSums
?ar
ar(1h)
ar(lh)
ar(lh, order.max=1)
plot(lh)
?coda
install.packages("coda")
library(coda)
spectrum0.ar(lh)
length(lh)
spectrum0.ar(lh)$spec*length(lh)
summary(spectrum0.ar(lh)$spec*length(lh))
summary(spectrum0.ar(lh))
spectrum0.ar(lh)
exp(spectrum0.ar(lh)$spec)
spectrum0.ar(lh)$spec/length(lh)
lh
spectrum0.ar(lh)$spec*length(lh)
(1-spectrum0.ar(lh)$spec)*length(lh)
sin(10)
sin(seq(1,10,1))
plot(sin(seq(1,10,1)))
spectrum0.ar(plot(sin(seq(1,10,1))))
spectrum0.ar(sin(seq(1,10,1)))
spectrum0.ar(sin(seq(1,10,1)))*10
spectrum0.ar(sin(seq(1,10,1)))$spec*10
plot(sin(seq(1,20,1)))
spectrum0.ar(sin(seq(1,10,1)))$spec*20
?spectrum0.ar
ar(sin(seq(1,10,1)))
ar(sin(seq(1,10,1)), max.order=1)
ar(sin(seq(1,10,1)), order.max=1)
spectrum0.ar(sin(seq(1,10,1)))
10*.4692
plot(sin(seq(1,20,1)))
plot(sin(seq(1,10,1)))
plot(sin(seq(1,100,1)))
plot(sin(seq(1,100,1)), type="l")
spectrum0.ar(sin(seq(1,100,1)))$spec*100
spectrum0.ar(sin(seq(1,10,1)))$spec*20
spectrum0.ar(sin(seq(1,20,1)))$spec*20
spectrum0.ar(sin(seq(1,20,1)))$spec
(1-spectrum0.ar(sin(seq(1,20,1)))$spec)*20
plot(sin(seq(1,20,1)), type="l")
spectrum0.ar(sin(seq(1,20,1)))$spec*20
spectrum0.ar(sin(seq(1,20,1)))
spectrum0.ar(sin(seq(1,20,2)))
spectrum0.ar(sin(seq(1,20,4)))
plot(sin(seq(1,20,4)))
spectrum0.ar(sin(seq(1,20,4)))$spec*5
spectrum0.ar(sin(seq(1,20,by=1)))$spec
spectrum0.ar(sin(seq(1,20,by=1)))
plot(sin(seq(1,20,by=1)),type="l")
plot(sin(seq(1,200,by=1)),type="l")
spectrum0.ar(sin(seq(1,200,by=1)))
spectrum0.ar(cosin(seq(1,200,by=1)))
spectrum0.ar(cos(seq(1,200,by=1)))
plot(cos(seq(1,200,by=1)),type="l")
spectrum0.ar(sin(seq(1,200,by=1)))
?coda
library(coda)
?coda
??coda
plot(cos(seq(1,10,by=1)),type="l")
plot(cos(seq(1,20,by=1)),type="l")
spectrum0.ar(sin(seq(1,20,by=1)))
plot(sin(seq(1,20,by=1)),type="l")
(1-spectrum0.ar(sin(seq(1,20,by=1))))*20
(1-spectrum0.ar(sin(seq(1,20,by=1)))$spec)*20
effectiveSize(sin(seq(1,20,by=1)))
plot(sin(seq(1,20,by=1)),type="l")
effectiveSize(sin(seq(1,200,by=1)))
coda::effectiveSize(sin(seq(1,200,by=1)))
ts.corr <- arima.sim(model=list(ar=-0.5),n=100)
plot(ts.corr, type="l")
spectrum0.ar(ts.corr)
effectiveSize(ts.corr)
length(ts.corr)
ts.corr <- arima.sim(model=list(ar=0.5),n=100)
effectiveSize(ts.corr)
plot(ts.corr, type="l")
coda::effectiveSize(sin(seq(1,200,by=1)))
ts.corr <- arima.sim(model=list(ar=0.25),n=100)
effectiveSize(arima.sim(model=list(ar=0.25),n=100)
)
effectiveSize(arima.sim(model=list(ar=0.25),n=100))
effectiveSize(arima.sim(model=list(ar=0.5),n=100))
effectiveSize(arima.sim(model=list(ar=0.05),n=100))
effectiveSize(arima.sim(model=list(ar=0.25),n=100))
effectiveSize(arima.sim(model=list(ar=0.3),n=100))
effectiveSize(arima.sim(model=list(ar=0.5),n=100))
effectiveSize(arima.sim(model=list(ar=0.5),n=100))
effectiveSize(arima.sim(model=list(ar=0.5),n=100))
effectiveSize(arima.sim(model=list(ar=0.5),n=100))
effectiveSize(arima.sim(model=list(ar=0.5),n=100))
effectiveSize(arima.sim(model=list(ar=0.75),n=100))
effectiveSize(arima.sim(model=list(ar=0.85),n=100))
?effectiveSize
arima.sim(model=list(ar=0.85),n=100)
dat <- as.data.frame(arima.sim(model=list(ar=0.85),n=100))
dat
effectiveSize(dat$x)
effectiveSize(arima.sim(model=list(ar=0.85),n=100))
effectiveSize(arima.sim(model=list(ar=0.85),n=100))
effectiveSize(arima.sim(model=list(ar=0.85),n=100))
effectiveSize(arima.sim(model=list(ar=0.85),n=100))
dat <- effectiveSize(arima.sim(model=list(ar=0.5),n=100))
spectrum0.ar(dat)/length(dat)
spectrum0.ar(dat)$spec/length(dat)
dat <- arima.sim(model=list(ar=0.5),n=100)
spectrum0.ar(dat)$spec/length(dat)
sd(dat)/length(dat)
sd(dat)/length(dat)^2
(sd(dat)/length(dat)^2)*0.02253895
setwd("~/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/")
list.files()
w <- npyLoad("allRS_poly.weights.npy")
library(RcppCNPy) # for reading python numpy (.npy) files
w <- npyLoad("allRS_poly.weights.npy")
head(w)
hist(w)
plot(w, type='o')
w <- as.data.frame(npyLoad("allRS_poly.weights.npy"))
head(w)
plot(w$V1)
dim(w)
dim(w)[1]/2
plot(w$V1, cex=.25, col="gray")
plot(w$V1[1:230791], cex=.25, col="gray")
mean(w$V1)
mean(w$V2)
plot(w$V1[1:230791], cex=.25, col="gray", ylim=c(-.03,.03))
points(which(abs(w$V1[1:230791])>.02), cex=.25, col="red", ylim=c(-.03,.03))
points(which(abs(w$V1[1:230791])>.02), cex=1, col="red", ylim=c(-.03,.03))
which(abs(w$V1[1:230791])>.02)
points(w$V1[which(abs(w$V1[1:230791])>.02)], cex=1, col="red", ylim=c(-.03,.03))
head(w)
w$pos <- seq(1,dim(w)[1],1)
plot(w$pos,w$V1[1:230791], cex=.25, col="gray", ylim=c(-.03,.03))
plot(w$pos[1:230791],w$V1[1:230791], cex=.25, col="gray", ylim=c(-.03,.03))
points(w$pos[1:230791],w$V1[which(abs(w$V1[1:230791])>.02)], cex=1, col="red", ylim=c(-.03,.03))
points(w$pos[1:230791],abs(w$V1[1:230791]>.02), cex=1, col="red", ylim=c(-.03,.03))
points(w$pos[1:230791],w$V1[1:230791]>.02, cex=1, col="red", ylim=c(-.03,.03))
points(w$pos[1:230791],w$V1>.02, cex=1, col="red", ylim=c(-.03,.03))
points(w$pos[1:230791],w$V1[1:230791 && which(abs(w$V1>.02))]>.02, cex=1, col="red", ylim=c(-.03,.03))
points(w$pos[1:230791],w$V1[1:230791 && which(abs(w$V1>.02))], cex=1, col="red", ylim=c(-.03,.03))
w$V1[1:230791 && which(abs(w$V1>.02))]
w$V1[1:230791 & which(abs(w$V1>.02))]
w$V1[1:230791 & which(abs(w$V1>.02))]
which(abs(w$V1>.02))
w$V1[which(abs(w$V1>.02))]
w$V1[which(w$V1>.02)]
w$V1[which(abs(w$V1>.02))]
points(w$pos[1:230791],w$V1[which(w$V1>.02)], cex=1, col="red", ylim=c(-.03,.03))
w$V1[which(w$V1>.02)]
points(w$pos,w$V1[which(w$V1>.02)], cex=1, col="red", ylim=c(-.03,.03))
plot(w$pos,w$V1[which(w$V1>.02)])
outliers <- w[which(w$V1>.02),]
str(outliers)
outliers <- w[which(abs(w$V1)>.02),]
str(outliers)
plot(w$pos[1:230791],w$V1[1:230791], cex=.25, col="gray", ylim=c(-.03,.03))
points(outliers$pos,outliers$V1, cex=1, col="red", ylim=c(-.03,.03))
points(outliers$pos,outliers$V1, cex=1, lwd=2, col="red", ylim=c(-.03,.03))
plot(w$pos[1:230791],w$V1[1:230791], cex=.25, col="gray", ylim=c(-.03,.03))
points(outliers$pos,outliers$V1, cex=1, lwd=1.5, col="red", ylim=c(-.03,.03))
.0023*13.3*(4.15+17.8)*27.7^.5
.0023*133*(4.15+17.8)*27.7^.5
.0023*133*30*(4.15+17.8)*27.7^.5
.0023*133*30*(4.15+17.8)*277^.5
.0023*133*(4.15+17.8)*277^.5
.0023*13.3*(4.15+17.8)*27.7^.5
.0023*13.3*30*(4.15+17.8)*27.7^.5
setwd("~/Downloads")
dat = read.csv("RedSpruce_340_metadata.csv")
dat = read.csv("Book1.csv")
dat = read.csv("Book1.csv", header=R)
dat = read.csv("Book1.csv", header=T)
dat = read.csv("Book1.csv", header=T)
dat = read.csv("Book1.txt", header=T)
?strsplit
library(RcppCNPy) # for reading python numpy (.npy) files
setwd("~/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/")
list.files()
s<-npyLoad("allRS_poly.selection.npy")
w <- as.data.frame(npyLoad("allRS_poly.weights.npy"))
head(w)
dim(w)
p <- read.table("allRS_poly_mafs.sites",sep="\t",header=T, stringsAsFactors=T)
dim(p)
p_filtered = p[which(p$kept_sites==1),]
dim(p_filtered)
